/* automatically generated by rust-bindgen 0.64.0 */

pub const _STRING_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _ISOC95_SOURCE: u32 = 1;
pub const _ISOC99_SOURCE: u32 = 1;
pub const _ISOC11_SOURCE: u32 = 1;
pub const _ISOC2X_SOURCE: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const _XOPEN_SOURCE: u32 = 700;
pub const _XOPEN_SOURCE_EXTENDED: u32 = 1;
pub const _LARGEFILE64_SOURCE: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const _DYNAMIC_STACK_SIZE_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 1;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_ISOCXX11: u32 = 1;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const __USE_XOPEN: u32 = 1;
pub const __USE_XOPEN_EXTENDED: u32 = 1;
pub const __USE_UNIX98: u32 = 1;
pub const _LARGEFILE_SOURCE: u32 = 1;
pub const __USE_XOPEN2K8XSI: u32 = 1;
pub const __USE_XOPEN2KXSI: u32 = 1;
pub const __USE_LARGEFILE: u32 = 1;
pub const __USE_LARGEFILE64: u32 = 1;
pub const __WORDSIZE: u32 = 32;
pub const __WORDSIZE32_SIZE_ULONG: u32 = 0;
pub const __WORDSIZE32_PTRDIFF_LONG: u32 = 0;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 0;
pub const __TIMESIZE: u32 = 32;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_DYNAMIC_STACK_SIZE: u32 = 1;
pub const __USE_GNU: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 1;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 0;
pub const __GLIBC_USE_LIB_EXT2: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 1;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 1;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 0;
pub const __STATFS_MATCHES_STATFS64: u32 = 0;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 0;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i32 = -2147483648;
pub const INT_FAST32_MIN: i32 = -2147483648;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u32 = 2147483647;
pub const INT_FAST32_MAX: u32 = 2147483647;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: u32 = 4294967295;
pub const UINT_FAST32_MAX: u32 = 4294967295;
pub const INTPTR_MIN: i32 = -2147483648;
pub const INTPTR_MAX: u32 = 2147483647;
pub const UINTPTR_MAX: u32 = 4294967295;
pub const PTRDIFF_MIN: i32 = -2147483648;
pub const PTRDIFF_MAX: u32 = 2147483647;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: u32 = 4294967295;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const INT8_WIDTH: u32 = 8;
pub const UINT8_WIDTH: u32 = 8;
pub const INT16_WIDTH: u32 = 16;
pub const UINT16_WIDTH: u32 = 16;
pub const INT32_WIDTH: u32 = 32;
pub const UINT32_WIDTH: u32 = 32;
pub const INT64_WIDTH: u32 = 64;
pub const UINT64_WIDTH: u32 = 64;
pub const INT_LEAST8_WIDTH: u32 = 8;
pub const UINT_LEAST8_WIDTH: u32 = 8;
pub const INT_LEAST16_WIDTH: u32 = 16;
pub const UINT_LEAST16_WIDTH: u32 = 16;
pub const INT_LEAST32_WIDTH: u32 = 32;
pub const UINT_LEAST32_WIDTH: u32 = 32;
pub const INT_LEAST64_WIDTH: u32 = 64;
pub const UINT_LEAST64_WIDTH: u32 = 64;
pub const INT_FAST8_WIDTH: u32 = 8;
pub const UINT_FAST8_WIDTH: u32 = 8;
pub const INT_FAST16_WIDTH: u32 = 32;
pub const UINT_FAST16_WIDTH: u32 = 32;
pub const INT_FAST32_WIDTH: u32 = 32;
pub const UINT_FAST32_WIDTH: u32 = 32;
pub const INT_FAST64_WIDTH: u32 = 64;
pub const UINT_FAST64_WIDTH: u32 = 64;
pub const INTPTR_WIDTH: u32 = 32;
pub const UINTPTR_WIDTH: u32 = 32;
pub const INTMAX_WIDTH: u32 = 64;
pub const UINTMAX_WIDTH: u32 = 64;
pub const PTRDIFF_WIDTH: u32 = 32;
pub const SIG_ATOMIC_WIDTH: u32 = 32;
pub const SIZE_WIDTH: u32 = 32;
pub const WCHAR_WIDTH: u32 = 32;
pub const WINT_WIDTH: u32 = 32;
pub const SLVS_FREE_IN_3D: u32 = 0;
pub const SLVS_E_POINT_IN_3D: u32 = 50000;
pub const SLVS_E_POINT_IN_2D: u32 = 50001;
pub const SLVS_E_NORMAL_IN_3D: u32 = 60000;
pub const SLVS_E_NORMAL_IN_2D: u32 = 60001;
pub const SLVS_E_DISTANCE: u32 = 70000;
pub const SLVS_E_WORKPLANE: u32 = 80000;
pub const SLVS_E_LINE_SEGMENT: u32 = 80001;
pub const SLVS_E_CUBIC: u32 = 80002;
pub const SLVS_E_CIRCLE: u32 = 80003;
pub const SLVS_E_ARC_OF_CIRCLE: u32 = 80004;
pub const SLVS_C_POINTS_COINCIDENT: u32 = 100000;
pub const SLVS_C_PT_PT_DISTANCE: u32 = 100001;
pub const SLVS_C_PT_PLANE_DISTANCE: u32 = 100002;
pub const SLVS_C_PT_LINE_DISTANCE: u32 = 100003;
pub const SLVS_C_PT_FACE_DISTANCE: u32 = 100004;
pub const SLVS_C_PT_IN_PLANE: u32 = 100005;
pub const SLVS_C_PT_ON_LINE: u32 = 100006;
pub const SLVS_C_PT_ON_FACE: u32 = 100007;
pub const SLVS_C_EQUAL_LENGTH_LINES: u32 = 100008;
pub const SLVS_C_LENGTH_RATIO: u32 = 100009;
pub const SLVS_C_EQ_LEN_PT_LINE_D: u32 = 100010;
pub const SLVS_C_EQ_PT_LN_DISTANCES: u32 = 100011;
pub const SLVS_C_EQUAL_ANGLE: u32 = 100012;
pub const SLVS_C_EQUAL_LINE_ARC_LEN: u32 = 100013;
pub const SLVS_C_SYMMETRIC: u32 = 100014;
pub const SLVS_C_SYMMETRIC_HORIZ: u32 = 100015;
pub const SLVS_C_SYMMETRIC_VERT: u32 = 100016;
pub const SLVS_C_SYMMETRIC_LINE: u32 = 100017;
pub const SLVS_C_AT_MIDPOINT: u32 = 100018;
pub const SLVS_C_HORIZONTAL: u32 = 100019;
pub const SLVS_C_VERTICAL: u32 = 100020;
pub const SLVS_C_DIAMETER: u32 = 100021;
pub const SLVS_C_PT_ON_CIRCLE: u32 = 100022;
pub const SLVS_C_SAME_ORIENTATION: u32 = 100023;
pub const SLVS_C_ANGLE: u32 = 100024;
pub const SLVS_C_PARALLEL: u32 = 100025;
pub const SLVS_C_PERPENDICULAR: u32 = 100026;
pub const SLVS_C_ARC_LINE_TANGENT: u32 = 100027;
pub const SLVS_C_CUBIC_LINE_TANGENT: u32 = 100028;
pub const SLVS_C_EQUAL_RADIUS: u32 = 100029;
pub const SLVS_C_PROJ_PT_DISTANCE: u32 = 100030;
pub const SLVS_C_WHERE_DRAGGED: u32 = 100031;
pub const SLVS_C_CURVE_CURVE_TANGENT: u32 = 100032;
pub const SLVS_C_LENGTH_DIFFERENCE: u32 = 100033;
pub const SLVS_C_ARC_ARC_LEN_RATIO: u32 = 100034;
pub const SLVS_C_ARC_LINE_LEN_RATIO: u32 = 100035;
pub const SLVS_C_ARC_ARC_DIFFERENCE: u32 = 100036;
pub const SLVS_C_ARC_LINE_DIFFERENCE: u32 = 100037;
pub const SLVS_RESULT_OKAY: u32 = 0;
pub const SLVS_RESULT_INCONSISTENT: u32 = 1;
pub const SLVS_RESULT_DIDNT_CONVERGE: u32 = 2;
pub const SLVS_RESULT_TOO_MANY_UNKNOWNS: u32 = 3;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[test]
fn bindgen_test_layout___locale_struct() {
    const UNINIT: ::std::mem::MaybeUninit<__locale_struct> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__locale_struct>(),
        116usize,
        concat!("Size of: ", stringify!(__locale_struct))
    );
    assert_eq!(
        ::std::mem::align_of::<__locale_struct>(),
        4usize,
        concat!("Alignment of ", stringify!(__locale_struct))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__locales) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__locales)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_b) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_b)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_tolower) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_tolower)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__ctype_toupper) as usize - ptr as usize },
        60usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__ctype_toupper)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__names) as usize - ptr as usize },
        64usize,
        concat!(
            "Offset of field: ",
            stringify!(__locale_struct),
            "::",
            stringify!(__names)
        )
    );
}
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_longlong;
pub type __uint64_t = ::std::os::raw::c_ulonglong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_longlong;
pub type __u_quad_t = ::std::os::raw::c_ulonglong;
pub type __intmax_t = ::std::os::raw::c_longlong;
pub type __uintmax_t = ::std::os::raw::c_ulonglong;
pub type __dev_t = __uint64_t;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = __uint64_t;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_uint;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = __int64_t;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[test]
fn bindgen_test_layout___fsid_t() {
    const UNINIT: ::std::mem::MaybeUninit<__fsid_t> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<__fsid_t>(),
        8usize,
        concat!("Size of: ", stringify!(__fsid_t))
    );
    assert_eq!(
        ::std::mem::align_of::<__fsid_t>(),
        4usize,
        concat!("Alignment of ", stringify!(__fsid_t))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).__val) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(__fsid_t),
            "::",
            stringify!(__val)
        )
    );
}
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = __uint64_t;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = __int64_t;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = __int64_t;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = __uint64_t;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = __uint64_t;
pub type __fsword_t = ::std::os::raw::c_int;
pub type __ssize_t = ::std::os::raw::c_int;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_int;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type __time64_t = __int64_t;
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_int;
pub type int_fast32_t = ::std::os::raw::c_int;
pub type int_fast64_t = ::std::os::raw::c_longlong;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_uint;
pub type uint_fast32_t = ::std::os::raw::c_uint;
pub type uint_fast64_t = ::std::os::raw::c_ulonglong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type Slvs_hParam = u32;
pub type Slvs_hEntity = u32;
pub type Slvs_hConstraint = u32;
pub type Slvs_hGroup = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Slvs_Param {
    pub h: Slvs_hParam,
    pub group: Slvs_hGroup,
    pub val: f64,
}
#[test]
fn bindgen_test_layout_Slvs_Param() {
    const UNINIT: ::std::mem::MaybeUninit<Slvs_Param> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Slvs_Param>(),
        16usize,
        concat!("Size of: ", stringify!(Slvs_Param))
    );
    assert_eq!(
        ::std::mem::align_of::<Slvs_Param>(),
        8usize,
        concat!("Alignment of ", stringify!(Slvs_Param))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Param),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Param),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).val) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Param),
            "::",
            stringify!(val)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Slvs_Entity {
    pub h: Slvs_hEntity,
    pub group: Slvs_hGroup,
    pub type_: ::std::os::raw::c_int,
    pub wrkpl: Slvs_hEntity,
    pub point: [Slvs_hEntity; 4usize],
    pub normal: Slvs_hEntity,
    pub distance: Slvs_hEntity,
    pub param: [Slvs_hParam; 4usize],
}
#[test]
fn bindgen_test_layout_Slvs_Entity() {
    const UNINIT: ::std::mem::MaybeUninit<Slvs_Entity> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Slvs_Entity>(),
        56usize,
        concat!("Size of: ", stringify!(Slvs_Entity))
    );
    assert_eq!(
        ::std::mem::align_of::<Slvs_Entity>(),
        4usize,
        concat!("Alignment of ", stringify!(Slvs_Entity))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Entity),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Entity),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Entity),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrkpl) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Entity),
            "::",
            stringify!(wrkpl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).point) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Entity),
            "::",
            stringify!(point)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).normal) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Entity),
            "::",
            stringify!(normal)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).distance) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Entity),
            "::",
            stringify!(distance)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Entity),
            "::",
            stringify!(param)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Slvs_Constraint {
    pub h: Slvs_hConstraint,
    pub group: Slvs_hGroup,
    pub type_: ::std::os::raw::c_int,
    pub wrkpl: Slvs_hEntity,
    pub valA: f64,
    pub ptA: Slvs_hEntity,
    pub ptB: Slvs_hEntity,
    pub entityA: Slvs_hEntity,
    pub entityB: Slvs_hEntity,
    pub entityC: Slvs_hEntity,
    pub entityD: Slvs_hEntity,
    pub other: ::std::os::raw::c_int,
    pub other2: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Slvs_Constraint() {
    const UNINIT: ::std::mem::MaybeUninit<Slvs_Constraint> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Slvs_Constraint>(),
        56usize,
        concat!("Size of: ", stringify!(Slvs_Constraint))
    );
    assert_eq!(
        ::std::mem::align_of::<Slvs_Constraint>(),
        8usize,
        concat!("Alignment of ", stringify!(Slvs_Constraint))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).h) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(h)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).group) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(group)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).type_) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(type_)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).wrkpl) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(wrkpl)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).valA) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(valA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptA) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(ptA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).ptB) as usize - ptr as usize },
        28usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(ptB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entityA) as usize - ptr as usize },
        32usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(entityA)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entityB) as usize - ptr as usize },
        36usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(entityB)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entityC) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(entityC)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entityD) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(entityD)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(other)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).other2) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_Constraint),
            "::",
            stringify!(other2)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Slvs_System {
    #[doc = " INPUT VARIABLES\n\n Here, we specify the parameters and their initial values, the entities,\n and the constraints. For example, param[] points to the array of\n parameters, which has length params, so that the last valid element\n is param[params-1].\n\n param[] is actually an in/out variable; if the solver is successful,\n then the new values (that satisfy the constraints) are written to it."]
    pub param: *mut Slvs_Param,
    pub params: ::std::os::raw::c_int,
    pub entity: *mut Slvs_Entity,
    pub entities: ::std::os::raw::c_int,
    pub constraint: *mut Slvs_Constraint,
    pub constraints: ::std::os::raw::c_int,
    pub dragged: [Slvs_hParam; 4usize],
    pub calculateFaileds: ::std::os::raw::c_int,
    #[doc = " OUTPUT VARIABLES\n\n If the solver fails, then it can report which constraints are causing\n the problem. The caller should allocate the array failed[], and pass\n its size in faileds.\n\n The solver will set faileds equal to the number of problematic\n constraints, and write their Slvs_hConstraints into failed[]. To\n ensure that there is sufficient space for any possible set of\n failing constraints, faileds should be greater than or equal to\n constraints."]
    pub failed: *mut Slvs_hConstraint,
    pub faileds: ::std::os::raw::c_int,
    pub dof: ::std::os::raw::c_int,
    pub result: ::std::os::raw::c_int,
}
#[test]
fn bindgen_test_layout_Slvs_System() {
    const UNINIT: ::std::mem::MaybeUninit<Slvs_System> = ::std::mem::MaybeUninit::uninit();
    let ptr = UNINIT.as_ptr();
    assert_eq!(
        ::std::mem::size_of::<Slvs_System>(),
        60usize,
        concat!("Size of: ", stringify!(Slvs_System))
    );
    assert_eq!(
        ::std::mem::align_of::<Slvs_System>(),
        4usize,
        concat!("Alignment of ", stringify!(Slvs_System))
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).param) as usize - ptr as usize },
        0usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(param)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).params) as usize - ptr as usize },
        4usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(params)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entity) as usize - ptr as usize },
        8usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(entity)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).entities) as usize - ptr as usize },
        12usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(entities)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constraint) as usize - ptr as usize },
        16usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(constraint)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).constraints) as usize - ptr as usize },
        20usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(constraints)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dragged) as usize - ptr as usize },
        24usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(dragged)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).calculateFaileds) as usize - ptr as usize },
        40usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(calculateFaileds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).failed) as usize - ptr as usize },
        44usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(failed)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).faileds) as usize - ptr as usize },
        48usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(faileds)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).dof) as usize - ptr as usize },
        52usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(dof)
        )
    );
    assert_eq!(
        unsafe { ::std::ptr::addr_of!((*ptr).result) as usize - ptr as usize },
        56usize,
        concat!(
            "Offset of field: ",
            stringify!(Slvs_System),
            "::",
            stringify!(result)
        )
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}
